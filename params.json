{"name":"runit-quickstart","tagline":"Getting started with the runit - a UNIX init scheme with service supervision","body":"### Abstract\r\n\r\nThe purpose of this tutorial is to get you up and running with runit as quickly as possible. According to the official documentaion, runit is \"*a UNIX init scheme with service supervision*\". Basically this means that runit provides:\r\n\r\n1. Automatic starting of services when the system starts\r\n2. Automatic monitoring and restarting of services if they terminate\r\n\r\nThis tutorial will describe the basic usage of the utilities included in the runit package by providing a template to bootstrap the management of new services as well as providing a simple example service. The purpose of process supervision is to automate the task of keeping your infrastrucutre up and running. If you are serious about creating a robust environment, you should use this tutorial as a starting point to get you over the initial hump associated with learning a new tool and then continue by checking out the official documentation and performing further experimentation. \r\n\r\nOfficial Documentation: [http://smarden.org/runit/](http://smarden.org/runit/)\r\n\r\n### What You Will Learn\r\n\r\n1. How to create a runit template used to configure new montitored services\r\n2. How to setup your first monitored service\r\n3. How to manage monitored services manually\r\n\r\n### 0. Prerequisites\r\n\r\nMake sure that you have runit installed on your system. Most linux distributions should have a runit package available in their repositories. For example, if you are running a Debian based release you can install runit by executing the following command:\r\n\r\n```\r\n# apt-get install runit\r\n```\r\n\r\n*Note: Snippets starting with the '#' character represent command you should enter in your shell excluding the '#'.*\r\n\r\nTo verify that you have successfully installed runit and it is up and running, look for a process running the ```runsvdir``` command by executing the following:\r\n\r\n```\r\n# ps -ef | grep runsvdir\r\n```\r\n\r\nThe output of the command should be similar to this:\r\n\r\n```\r\nroot      2783     1  0 15:34 ?        00:00:00 runsvdir -P /etc/service log: ...........................................................................................................................................................................................................................................................................................................................................................................................................\r\n```\r\n\r\nIf you see a ```runsvdir``` process then continue on. If not ensure that runit was installed properly by checking the documentation for you distro. The ```runsvdir``` utility is the first of several that we will encounter in this tutorial. The design of runit takes a very \"Unixy\" approach by breaking down functionality into several small utilities each responsible for a single task. This approach allows the simple components to be composed in various ways to suit you needs. The core runit utilities are ```runsvdir```, ```runsv```, ```chpst```, ```svlogd```, and ```sv```. Throughout this tutorial we will combine these utilities to configure and run a managed service.\r\n\r\n### 1. Creating a Template\r\n\r\nThe first thing we need to do is take a closer look at what the ```runsvdir -P /etc/service log:.......``` command is doing. Bascially, this command is watching the ```/etc/service``` directory for files used to configure a monitored service. A monitored service is configured by adding a subdirecotry to ```/etc/service``` with a ```run``` script in it.  When ```runsvdir``` finds a new service configuration, it starts a new ```runsv``` process to manage the service. As far as ```runsvdir``` is concerned, there really is not much more to it that that. Remember that runit's philosophy is to provide simple utilities with a single responsibility. Check out the man page for further details:\r\n\r\n```\r\n# man runsvdir\r\n```\r\n\r\nMake sure that the ```/etc/service``` directory exists and if it does not, create it with the following command:\r\n\r\n```\r\n# mkdir /etc/service\r\n```\r\n\r\nRather than adding our configuration files directly to the ```/etc/service``` directory, let's create a staging directory that we can use to develop and test our configurations. Once we are happy with our service configuration, we can deploy it by creating a symbolic link to it from the ```/etc/service``` directory. You can use any directory that you like for staging, but I like to use ```/etc/runit```. Go ahead and create your staging directory now.\r\n\r\n```\r\n# mkdir /etc/runit\r\n```\r\n\r\nBefore creating our first real service configuration, let's create a template. This template will illustrate the basics of using runit and can be used to quickly create new configurations in the future. Create a directory for our template by running this command:\r\n\r\n```\r\n# mkdir /etc/runit/template\r\n```\r\n\r\nNext, create a script named ```run``` in the template directory with the following contents:\r\n\r\n```\r\n#!/bin/sh -e\r\nexec 2>&1\r\nexec chpst -u USER COMMAND\r\n```\r\n\r\nMake the ```run``` script executable by running:\r\n```\r\n# chmod +x /etc/runit/template/run\r\n```\r\n\r\nThis script is quite simple. First it redirects all output from stderr to stdout. Next, it executes some ```COMMAND``` as the given ```USER``` with the ```chpst``` utility. The ```chpst``` utility allows us to configure how the command will be executed. Because the ```run``` script will be executed as the ```root``` user, we can use ```chpst``` to change the context to a normal user with limited permissions. ```chpst``` has many more options for configuring the context in which to execute a command. Check out the man page for more info.\r\n\r\n```\r\n# man chpst\r\n```\r\n\r\nWhen the ```runsvdir``` process detects a new directory in ```/etc/service``` it will start a new ```runsv``` process that will be responible for executing and monitoring the ```run``` script. Take a look at the ```runsv``` man page for more details.\r\n\r\n\r\n```\r\n# man runsv\r\n```\r\n\r\nYou may have noticed that the man page for ```runsv``` mentions that it can optionally start an appendant log service. Because logging is such a critical part of monitoring an environment, let's create a template script for logging the output of our monitored process.\r\n\r\n\r\nTo setup logging for our service, create a new ```log``` directory by running the following command:\r\n```\r\n# mkdir /etc/runit/template/log\r\n```\r\n\r\nIn the new directory create a script named ```run``` with the following contets:\r\n\r\n```\r\n#!/bin/sh\r\nexec chpst -u USER svlogd -tt LOGDIR\r\n```\r\n\r\nMake the ```run``` script executable by running the following command:\r\n```\r\n# chmod +x /etc/runit/template/log/run\r\n```\r\n\r\nThis script uses ```chpst``` to start a ```svlogd``` daemon as the given ```USER``` wirting logs to the ```LOGDIR``` directory. For details on logging configuration, check out the ```svlogd``` man page.\r\n\r\n```\r\n# man svlogd\r\n```\r\n\r\nWhen ```runsvdir``` notices a monitor configuration in a new directory under ```/etc/service```, it looks for a sub directory named ```log```. If it finds one it starts a new ```runsv``` process that will execute and monitor the ```run``` script in the ```log``` directory. \r\n\r\n### 2. An Example Service\r\n\r\nLet's take our template and create a simple example service configuration. First, create a new user that will be used by ```chpst``` in the ```run``` script. You can name the user anything you want. \r\n\r\n```\r\n# adduser foo\r\n```\r\n\r\nNext, let's create a directory to host the service and change its ownership to our new user. You can choose any directory that you like. I like to setup applications in the ```opt``` directory.\r\n\r\n```\r\n# mkdir /opt/example\r\n# chown foo:foo /opt/example\r\n```\r\n\r\nNow that we have a home for our service, let's create a simple script that will stand in for a real service. Change to the new ```foo``` user:\r\n\r\n```\r\n# su foo\r\n```\r\n\r\nCreate a new file in ```/opt/example``` called ```foo-service.sh``` and add the following contents:\r\n```\r\n#!/bin/bash\r\n\r\necho \"Started service...\"\r\n\r\nfor i in {1..30}\r\ndo\r\n    echo \"Doing stuff...\"\r\n    sleep 1\r\ndone\r\n\r\necho \"Oh no I crashed...\" >&2\r\nexit 1\r\n```\r\n\r\nMake this script executable by executing this command:\r\n```\r\n# chmod +x /opt/example/foo-service.sh\r\n```\r\n\r\nThis script will simulate a real application that crashes periodically by logging some information for 30 seconds, logging an error to stderr, and then exiting with a non zero status. Try it out by executing:\r\n\r\n```\r\n# /opt/example/foo-service.sh\r\n```\r\n\r\nNext, create a directory that will contain the logs for the service.\r\n\r\n```\r\n# mkdir /opt/example/logs\r\n```\r\n\r\nThat's everthing we need to do as the ```foo``` user, so switch back to ```root``` by executing:\r\n```\r\n# exit\r\n```\r\n\r\nNow we are ready to use the template we defined to configure ```runit``` to monitor our example service. Create the configuration in our staging directory by copying the template to a new directory named ```example```.\r\n\r\n```\r\n# cp -R /etc/runit/template /etc/runit/example\r\n```\r\n\r\nUpdate the ```/etc/runit/example/run``` script to execute the ```foo-service.sh``` script as the ```foo``` user.\r\n\r\n```\r\n#!/bin/sh -e\r\nexec 2>&1\r\nexec chpst -u foo /opt/example/foo-service.sh\r\n```\r\n\r\nUpdate the ```/etc/runit/example/log/run``` log script log to the ```/etc/example/logs``` directory as the ```foo``` user.\r\n\r\n```\r\n#!/bin/sh\r\nexec chpst -u foo svlogd -tt /opt/example/logs\r\n```\r\n\r\nBefore we deploy the service to ```/etc/service```, let's test it to make sure everything is setup properly.\r\n\r\n```\r\n# /etc/runit/example/run\r\n```\r\n\r\nIf everything is ok, you should see the script log output for 30 seconds, log an error and then terminate.\r\n\r\nFinally, we are ready to deploy the service. Create a symbolic link in ```/etc/service``` to our staging location.\r\n```\r\n# ln -s /etc/runit/example /etc/service/example\r\n```\r\n\r\nThe ```runsvdir``` process should have noticed our new monitor configuration and started two ```runsv``` processes to execute the service and run the log daemon. To verify that everything is working, check the status of our service.\r\n\r\n```\r\n# sv status example\r\n```\r\n\r\nYou should see output similar to what is shown below to indicate the service and logger are running.\r\n```\r\nrun: example: (pid 3483) 3s; run: log: (pid 3324) 154s\r\n```\r\n\r\nYou can watch the output of the service by tailing the log.\r\n```\r\n# tail -f /opt/example/logs/current\r\n```\r\n\r\nYou should see the service logging output, logging an error, and then starting over as the ```runsv``` process notices the process terminate and restarts it.\r\n\r\n### 3. Managing Services\r\nFinally, let's take a look at the ```sv``` utility. ```sv``` is used to manually manage your services. \r\n\r\nTo check the status of the example service run:\r\n```\r\n# sv status example\r\n```\r\n\r\nTo stop the example service run:\r\n\r\n```\r\n# sv stop example\r\n```\r\n\r\nYou will notice if you watch the logs that the service is no longer writing any output. Once you stop a service with ```sv```, it will not be restarted automatically until you explicitly restart it.\r\n\r\nTo start the service again run:\r\n\r\n```\r\n# sv start example\r\n```\r\n\r\nTo stop and then start a service run:\r\n```\r\n# sv restart example\r\n```\r\n\r\nMake sure to check out the ```sv``` man page to see additional options.\r\n\r\n```\r\n# man sv\r\n```\r\n\r\n### Start Your Monitors!!!\r\n\r\nWith what you have learned in this tutorial, you should now be able to configure services to be monitored with ```runit```. Try using the template to monitor a web application, some web services, or your CI server.   \r\n\r\n### Contact Me\r\n\r\nIf you have any questions or would like further clarification, please feel free to shoot me an email. I would be glad to help. \r\n\r\nKevin\r\n\r\n<krchard@gmail.com>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}